// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$active-time-name: 'active_time';
$active-time-x: 0px;
$active-time-y: 0px;
$active-time-offset-x: 0px;
$active-time-offset-y: 0px;
$active-time-width: 121px;
$active-time-height: 121px;
$active-time-total-width: 159px;
$active-time-total-height: 121px;
$active-time-image: '../../images/icon-sprites.png?t=1650006217719';
$active-time: (0px, 0px, 0px, 0px, 121px, 121px, 159px, 121px, '../../images/icon-sprites.png?t=1650006217719', 'active_time', );
$zoom-big-name: 'zoom_big';
$zoom-big-x: 129px;
$zoom-big-y: 0px;
$zoom-big-offset-x: -129px;
$zoom-big-offset-y: 0px;
$zoom-big-width: 30px;
$zoom-big-height: 29px;
$zoom-big-total-width: 159px;
$zoom-big-total-height: 121px;
$zoom-big-image: '../../images/icon-sprites.png?t=1650006217719';
$zoom-big: (129px, 0px, -129px, 0px, 30px, 29px, 159px, 121px, '../../images/icon-sprites.png?t=1650006217719', 'zoom_big', );
$spritesheet-width: 159px;
$spritesheet-height: 121px;
$spritesheet-image: '../../images/icon-sprites.png?t=1650006217719';
$spritesheet-sprites: ($active-time, $zoom-big, );
$spritesheet: (159px, 121px, '../../images/icon-sprites.png?t=1650006217719', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5) / 2;
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6) / 2;
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3) / 2;
  $sprite-offset-y: nth($sprite, 4) / 2;
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-size($sprite) {
  $sprite-width: $spritesheet-width / 2;
  $sprite-height: $spritesheet-height / 2;
  background-size: $sprite-width $sprite-height;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  display:inline-block;
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-size($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .icon-#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
